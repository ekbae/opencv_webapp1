## Webapp
# 2020.05.22
https://www.inflearn.com/course/opencv-webapp-cv-lecture

Django web framework
Linux
Python
Python-OpenCV


virtualenvwrapper
mkvirtualenv [name]
workon
setvirtualenvproject - project, env mapping
cdproject


pip install opencv-python]
cv2.__version 
'4.2.0' (lecture, 3.4.1)


pycharm 설치
다운받고, 압축푼다음에, bin에 가서, sudo ./pycharm.sh

PyCharm> edit configurations
parameters - 
runserver 127.0.0.1:8000


#Django
pip3 install django
django-admin startproject opencv_webapp .
터미널에서 실행
python manage.py runserver 127.0.0.1:8000


python3 manage.py startapp opencv_web #opencv_web app 을 하나 만들기. 폴더 생성돰

pycharm에서 site폴더
settings.py 
-> INSTALLED_APPS 에 APP 추가된 것 내용 추가
    'opencv_web', # add app
-> ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']    ## add

urls.py 에서 내용 추가
->
from django.conf.urls import include, url

urlpatterns = [
    path('admin/', admin.site.urls),
    url(r'', include('opencv_web.urls')),
]

app 폴더내에 urls.py를 새로 생성
내용 추가
->
from django.conf.urls import include, url
from . import views

urlpatterns = [
    url(r'^$', views.first_view, name='first_view'),
]

어떤 문자가 들어오든 view의 first_veiw로 가라는 것임. 
view.ppy에 가면 아무것도 없음. 그래서 first_view 함수 생성함


view.py 내용 추가
->
from django.shortcuts import render

# Create your views here.
from django.shortcuts import render

def first_view(request):
    return render(request, 'opencv_web/first_view.html',{})


first_view.html 이 없으니 만들어줄건데, 이때 경로를 잘 설정해야함. 
app폴더밑에 templates 폴더 생성하고 opencv_web 폴더 생성한뒤
new html file 생성




#Django의 흐름
# url 을 입력하면 site 에서 web1로 url 전달되서 views가 보이고, 
views는 templates 폴더에서 html을 띄우고
view에 form 이 들어가게 되면 DB와 연동됨
일을 세분화 하게 하기 위해서 만들어진 구조임

 
# DB를 추가해보자
site의 settings.py에서 
-> 
MEDIA_URL ='/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

app에 가서, url.py에서
->

from django.conf import settings #add 
from django.conf.urls.static import static # add

url pattens에 내용 추가
    url(r'^uimage/$', views.uimage, name='uimage'), # add

uimage 로 주소가 들어오면, uimage를 보여주겠다 
이미지파일을 업로드하기 위한 내용 추가

urlpatterns += static(settings.MEDIA_URL,
                      doucment_root=settings.MEDIA_ROOT)



views.py 에 가서 이미지 업로드 코드 작성
이미지 업로드할 Form은 UploadImageForm임
->
from .forms import UploadImageForm
from django.core.files.storage import FileSystemStorage



def uimage(request):
    if request.method == 'POST':
        form = UploadImageForm(request.POST, request.FILES)
    if form.is_valid():
        myfile=request.FILES['image']
        fs = FileSystemStorage()
        filename=fs.save(myfile.name, myfile)
        uploaded_file_url=fs.url(filename)
        return render(request, 'opencv_web/uimage.html',
                      {'form': form, 'uploaded_file_url': uploaded_file_url})
    else:
        form=UploadImageForm()
        return render(request, 'opencv_web/uimage.html',
                      {'form': form})




#forms.py가 없기 때문에 app에서 생성해줌

templates 에 uimage.html 설정
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<h1> image upload example </h1>
<form method = "POST" class = "post-form" enctype = "multipart/form-data">
    {% csrf_token %}    #security
    {{form.as_p}}
    <button type = "submit" class = "save btn-default" value=""upload">save! </button>
</form>
{% if uploaded_file_url %}
<img src=" {{uploaded_file_url}}">
<p>File uploaded at: <a href = "{{ uploaded_file_url }}">{{uploaded_file_url}}</a></p>
{% endif %}
<p><a href="{% url 'uimage' %}"> Return to home </a></p>
</body>
</html>


추가 pip3 install pillow 해줘야함. 

http://127.0.0.1:8000/uimage/

html
python3 manage.py migrate


## web site publish


git 에 내용 업로드
.gitignroe  활용
pythonanywhere 사이트에서 web app 추가
manual configuration 사용자 임의 설정
console에서 bash console연다 ls 해서 내용이 없으면 된거고, 아니면 rm -rf 폴더명 으로 강제 지워줌
git clone 해서 주소 복사

콘솔에서 virtualenv 생성
->
mkvirtualenv djagno -p python3.6

web에 virtual env 주소 설정
/home/ekbae8765/.virtualenvs/django

WSGi cinfigure. file 설정 추가 필요
내용 많은데 전부 지우고, 다음 내용 추가
->
import os
import sys

path = '/home/ekbae8765/opencv_webapp1'
if path not in sys.path:
    sys.path.append(path)

os.environ['DJANGO_SETTINGS_MODULE']='opencv_webapp.settings'

from django.core.wsgi import get_wsgi_application
from django.contrib.staticfiles.handlers import StaticFilesHandler

application = StaticFilesHandler(get_wsgi_application())


/home/ekbae8765/opencv_webapp1/opencv_webapp



notion에 있는게 다인데...
local의 가상환경 내보내기 해서, 
pip3 freeze > requirements.txt

git 에 올려주고, 
pythonanywhere의 console에서 git pull 한다
pip3 install -r requirements.txt #install lib.

설치가 완료되면 DB 마이그레이션 한번
python3 manage.py migrate

그리고 web에 가서 upload 하기

-----------------------------
DB
setting.py에 추가
MEDIA_ROOT_URL = '.'

app에 urls.py 추가
    url(r'^dface/$', views.dface, name='dface'), #add

models 에 내용 추가
class ImageUploadModel(models.Model):
    description = models.CharField(max_length=255, blank=True)
    document = models.ImageField(upload_to='images/%Y/%m/%d')
    uploaded_at = models.DateTimeField(auto_now_add=True)

forms.py 내용 추가
->
from .models import ImageUploadModel

class ImageUploadForm(forms.ModelForm):
    class Meta:
    	model = ImageUploadModel
    	fields = ('description', 'document')


views에 dface 함수 추가
def dface(request):
    if request.method=='POST':
        form = ImageUploadForm(request.POST, request.FILES)
        if form.is_valid():
            post = form.save(commit=False)
            post.save()

            imageURL = settings.MEDIA_URL + form.instance.docuemnt.name
            #opencv_dface(settings.MEDIA_ROOT_URL + imageURL)

            return render(request, 'opencv_web/dface.html', {'form':form, 'post': post})
    else:
        form = ImageUploadForm()
    return render(request, 'opencv_web/dface.html',{'form':form})



DB변경사항이 있어서 장고에 디비변경됬다고 전달해야함
python3 magage.py makemigrations
python3 magage.py migrate


app폴더에 views에서 def dface의 주석해제 
opencv_dface.py 만들기
->
from django.conf import settings
import numpy as np
import cv2

def opencv_deface(path):
    # Read the input image
    img = cv2.imread(path,1)

    if (type(img) is np.ndarray):
        print(img.shape)

        baseUrl = settings.MEDIA_ROOT_URL + settings.MEDIA_URL

        # Load the cascade
        face_cascade = cv2.CascadeClassifier(baseUrl+'haarcascade_frontalface_default.xml')
        # Convert into grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # Detect faces
        faces = face_cascade.detectMultiScale(gray, 1.1, 4)
        # Draw rectangle around the faces
        for (x, y, w, h) in faces:
            cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)

        cv2.imwrite(path, img)

    else:
        print('something error')
        print(path)


views.py에서 import
from .opencv_dface import opencv_dface


local 에서 서버 돌려보고 에러 없으면 git 으로 push 
git push 끝나면 pythonanywhere에서 pull 함

웹서버에서는 settings.py 와 media/images 를 관리하지 않을 것이기 때문에  --> MySQULdb로 사용
gitignore에 파일 추가
vi .gitignore
settings.py
/media/images


settings.py에서 수정
MEDIA_ROOT_URL = '/home/ekbae8765/opencv_webapp1'


pythonanywhere에서 Database에 MYSQL 추가
pw: mysql1234
ekbae8765$first

pip3 install pymysql
 
setting 에서 DB정보 수정

   'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ekbae8765$first'),
        'USER': 'ekbae8765',
        'PASSWORD': 'mysql1234'
        'HOST': 'ekbae8765.mysql.ppythonanywhere-services.com',
        'PORT': ''
    }


이렇게 된다음에 python manage.py migrate 를 해서 DB 를 업데이트함
error가 났는데, client 버전 문제라서, setting에 import pymysql 이후에 내용 추가함 
pymysql.version_info = (1, 3, 13, "final", 0)

publish 할때는 Debug 모드를 꼭 False로 해야 해커 공격이 없음.
보안상 외부에서 접근 못하게 되는데, 
media 폴더만 경로를 오픈 할 수 있음. -> static files 에 경로 변경



